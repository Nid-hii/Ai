def depth_limited_search(node, goal, depth, graph):
    """
    Perform Depth Limited Search to find the goal node.
    """
    if node == goal:
        return True
    if depth <= 0:
        return False
    for child in graph.get(node, []):
        if depth_limited_search(child, goal, depth - 1, graph):
            return True
    return False

def iterative_deepening_dfs(start, goal, max_depth, graph):
    """
    Perform Iterative Deepening Depth-First Search (IDDFS).
    """
    for depth in range(max_depth + 1):
        print(f"Depth: {depth}")
        if depth_limited_search(start, goal, depth, graph):
            return True
    return False

# Input graph from the user
graph = {}
num_edges = int(input("Enter the number of edges in the graph: "))
print("Enter the edges in the format 'node1 node2':")
for _ in range(num_edges):
    node1, node2 = input().split()
    if node1 not in graph:
        graph[node1] = []
    graph[node1].append(node2)

# Input start node, goal node, and maximum depth
start_node = input("Enter the start node: ")
goal_node = input("Enter the goal node: ")
max_depth = int(input("Enter the maximum depth: "))

# Perform IDDFS
found = iterative_deepening_dfs(start_node, goal_node, max_depth, graph)
if found:
    print(f"Goal node '{goal_node}' found!")
else:
    print(f"Goal node '{goal_node}' not found within depth {max_depth}.")
