import random

def heuristic(state):
    attacks = 0
    for i in range(len(state)):
        for j in range(i + 1, len(state)):
            if state[i] == state[j] or abs(state[i] - state[j]) == j - i:
                attacks += 1
    return attacks

def hill_climbing_8_queens(initial_state=None):
    if initial_state is None:
        state = [random.randint(0, 7) for _ in range(8)]  # Random initial state
    else:
        state = initial_state

    while True:
        current_h = heuristic(state)
        if current_h == 0:  # Found a solution
            return state

        next_state = None
        next_h = float('inf')

        for col in range(8):
            for row in range(8):
                if state[col] != row:  # Only consider moving the queen
                    new_state = state.copy()
                    new_state[col] = row
                    h = heuristic(new_state)
                    if h < next_h:
                        next_h = h
                        next_state = new_state

        if next_h >= current_h:  # No better neighbor found
            return None  # Stuck at local maximum
        state = next_state

def get_user_input():
    while True:
        try:
            user_input = input("Enter the initial positions of the queens (comma-separated, 0-7 for columns): ")
            initial_state = list(map(int, user_input.split(',')))
            if len(initial_state) != 8 or any(q < 0 or q > 7 for q in initial_state):
                raise ValueError
            return initial_state
        except ValueError:
            print("Invalid input. Please enter 8 integers between 0 and 7.")

if __name__ == "__main__":
    if input("Use a custom starting configuration? (y/n): ").strip().lower() == 'y':
        initial_state = get_user_input()
    else:
        initial_state = None

    solution = hill_climbing_8_queens(initial_state)
    if solution:
        print("Hill Climbing solution:", solution)
    else:
        print("No solution found.")
