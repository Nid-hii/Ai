# Define the Manhattan distance function
def manhattan_distance(state, goal_state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:  # Don't calculate for the blank tile (0)
                goal_i = (state[i][j] - 1) // 3
                goal_j = (state[i][j] - 1) % 3
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

# Function to get all neighboring states from the current state
def get_neighbors(state):
    neighbors = []
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:  # Find the blank tile (0)
                if i > 0:  # Move blank tile up
                    neighbors.append(swap(state, i, j, i - 1, j))
                if i < 2:  # Move blank tile down
                    neighbors.append(swap(state, i, j, i + 1, j))
                if j > 0:  # Move blank tile left
                    neighbors.append(swap(state, i, j, i, j - 1))
                if j < 2:  # Move blank tile right
                    neighbors.append(swap(state, i, j, i, j + 1))
    return neighbors

# Function to swap tiles in the puzzle (make a move)
def swap(state, i1, j1, i2, j2):
    new_state = [row[:] for row in state]  # Create a deep copy of the state
    new_state[i1][j1], new_state[i2][j2] = new_state[i2][j2], new_state[i1][j1]  # Swap the tiles
    return new_state

# DFS with Manhattan distance heuristic
def dfs_with_manhattan(initial_state, goal_state, visited=None):
    if visited is None:
        visited = set()

    # If we have reached the goal, return the path (list of states)
    if initial_state == goal_state:
        return [initial_state]

    visited.add(str(initial_state))  # Mark the state as visited (convert to string to store in set)

    # Get all neighbors and sort them based on Manhattan distance to the goal
    neighbors = sorted(get_neighbors(initial_state), key=lambda x: manhattan_distance(x, goal_state))

    for neighbor in neighbors:
        if str(neighbor) not in visited:  # If neighbor state has not been visited
            path = dfs_with_manhattan(neighbor, goal_state, visited)
            if path:  # If a valid path is found, return it
                return [initial_state] + path

    return None  # Return None if no solution is found

# Define the goal state for an 8-puzzle
GOAL_STATE = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

# Get initial state from the user input
initial_state = []
print("Enter the initial state of the 8-puzzle (row-wise, space-separated):")
for i in range(3):
    row = input(f"Enter row {i + 1} (space-separated values): ").split()
    initial_state.append([int(x) for x in row])

# Run DFS with Manhattan distance to solve the puzzle
solution = dfs_with_manhattan(initial_state, GOAL_STATE)

# Print the solution if found, otherwise indicate that no solution was found
if solution:
    print("\nSolution found!")
    for state in solution:
        for row in state:
            print(row)
        print()
else:
    print("No solution found.")
